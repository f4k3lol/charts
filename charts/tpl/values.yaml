global:
  # -- can be StatefulSet or Deployment (default)
  kind: Deployment
  # -- k8s replicas
  replicas: 1
  # -- k8s imagePullSecrets
  imagePullSecrets: []
  # -- chart nameOverride. should be used in multiple-dependency mode, for correct selectorLabels render
  nameOverride: ""
  fullnameOverride: ""
  # -- k8s podAnnotations
  podAnnotations: {}
  # -- k8s podSecurityContext
  podSecurityContext: {}
  # -- k8s enableServiceLinks
  enableServiceLinks: false
  # -- k8s nodeSelector
  nodeSelector: {}
  # -- k8s topologySpreadConstraints
  topologySpreadConstraints: []
  # -- k8s tolerations
  tolerations: []
  # -- k8s affinity
  affinity: {}
  # -- Raw k8s manifests, rendered as is
  extraManifests: []
  # -- k8s terminationGracePeriodSeconds
  terminationGracePeriodSeconds: null
  # -- k8s terminationGracePeriodSeconds
  restartPolicy: ""
  # -- k8s hpa settings
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 20
    behavior: {}
    metrics: []
  # -- k8s strategy
  strategy:
    type: RollingUpdate
  # -- k8s sts volumeClaimTemplates
  volumeClaimTemplates: []
  # -- k8s sts serviceName
  serviceName: ""
  # -- k8s sts minReadySeconds
  minReadySeconds: 0
  # -- k8s sts podManagedPolicy
  podManagementPolicy: OrderedReady
  # -- k8s sts updateStrategy
  updateStrategy: {}
  # -- k8s sts persistentVolumeClaimRetentionPolicy
  persistentVolumeClaimRetentionPolicy: {}

  # -- k8s volumeClaimTemplate defaults. merged into each volumeClaimTemplate
  defaultVolumeClaimTemplate:
    spec:
      accessModes: ["ReadWriteOnce"]

  # -- k8s container defaults. merged into each container
  defaultContainer:
    image:
      registry: ""
      baseRepository: ""
      repository: ""
      tag: ""
    imagePullPolicy: IfNotPresent
    volumes:
    resources:
    livenessProbe:
    readinessProbe:
    command:
    args:
    env:
    configs:

  # -- k8s service defaults. merged into each service
  defaultService:
    annotations: {}
    ports: []

  # -- k8s ingress defaults. merged into each ingress
  defaultIngress:
    className: nginx
    tls: []
    annotations: {}
    hosts: []
    paths: [{ path: "/" }]
    defaultPathType: ImplementationSpecific

# -- k8s container defaults. merged into each container
defaultContainer: {}
#   image:
#     registry: ""
#     baseRepository: ""
#     repository: ""
#     tag: ""
#   imagePullPolicy: IfNotPresent
#   volumes:
#   resources:
#   livenessProbe:
#   readinessProbe:
#   command:
#   args:
#   env:
#   configs:

# -- k8s service defaults. merged into each service
defaultService: {}
#   type: ClusterIP
#   annotations: {}
#   ports: []
#     - name: http
#       port: 8000
#       protocol: TCP
#       nodePort: 8080
#       targetPort: 80, default -> port

# -- k8s ingress defaults. merged into each ingress
defaultIngress: {}
#   className: nginx
#   tls: []
#   annotations: {}
#   hosts: []
#   paths: [{ path: /, type: Prefix }, { path: /v2 }]
#   defaultPathType: ImplementationSpecific
#   servicePortNumber: 8000 or
#   servicePortName: http

# -- k8s volumeClaimTemplate defaults. merged into each volumeClaimTemplate
defaultVolumeClaimTemplate: {}

# -- k8s secrets. Use this to define secrets
secrets: {}
# -- k8s configMaps. Use this to define configMaps
configMaps: {}
# -- k8s containers. Use this to define containers
containers: {}
# -- k8s services. Use this to define services
services: {}
